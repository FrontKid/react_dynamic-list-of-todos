{"version":3,"sources":["api.ts","types/Todo.ts","context/ContextTodo.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","ETodoStatus","initialContext","todos","inputField","filteredBy","ALL","isOpenModal","selectedTodo","setSelectedTodo","setIsOpenModal","setFilteredBy","setInputField","setTodos","TodoContext","createContext","ContextTodo","children","useState","initialValueDeps","initialValue","useMemo","Provider","value","TodoFilter","useContext","className","onChange","event","currentTarget","type","placeholder","target","style","pointerEvents","onClick","Loader","TodoModal","selectedUser","setSelectedUser","useEffect","userId","user","id","title","completed","href","email","name","TodoItem","todo","cn","TodoList","memo","map","App","isLoading","setIsLoading","finally","preparedTodos","clonedTodos","searchQueryLowerCase","toLowerCase","trim","filter","includes","Active","Completed","Error","getPreparedTodos","isShowTodoList","Boolean","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b170721.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export interface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n}\n\nexport enum ETodoStatus {\n  ALL = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import {\n  FC,\n  ReactNode,\n  createContext,\n  useMemo,\n  useState,\n} from 'react';\n\nimport { ETodoStatus, Todo } from '../types/Todo';\n\ntype TContextTodoProps = {\n  children: ReactNode;\n};\n\ninterface IContextInitial {\n  todos: Todo[];\n  inputField: string;\n  filteredBy: ETodoStatus;\n  isOpenModal: boolean;\n  selectedTodo: Todo | null;\n  setSelectedTodo: (newTodo: Todo | null) => void\n  setIsOpenModal: (newValue: boolean) => void;\n  setFilteredBy: (newValue: ETodoStatus) => void;\n  setInputField: (newValues: string) => void;\n  setTodos: (newValues: Todo[]) => void;\n}\n\nconst initialContext: IContextInitial = {\n  todos: [],\n  inputField: '',\n  filteredBy: ETodoStatus.ALL,\n  isOpenModal: false,\n  selectedTodo: null,\n  setSelectedTodo: () => { },\n  setIsOpenModal: () => { },\n  setFilteredBy: () => { },\n  setInputField: () => { },\n  setTodos: () => { },\n};\n\nexport const TodoContext = createContext(initialContext);\n\nexport const ContextTodo: FC<TContextTodoProps> = ({ children }) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [inputField, setInputField] = useState('');\n  const [filteredBy, setFilteredBy] = useState(ETodoStatus.ALL);\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  const initialValueDeps = [\n    todos,\n    inputField,\n    filteredBy,\n    isOpenModal,\n    selectedTodo,\n  ];\n\n  const initialValue = useMemo(() => ({\n    todos,\n    inputField,\n    isOpenModal,\n    selectedTodo,\n    filteredBy,\n    setSelectedTodo,\n    setTodos,\n    setInputField,\n    setIsOpenModal,\n    setFilteredBy,\n  }), initialValueDeps);\n\n  return (\n    <TodoContext.Provider value={initialValue}>\n      {children}\n    </TodoContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\n\nimport { TodoContext } from '../../context/ContextTodo';\n\nimport { ETodoStatus, Todo } from '../../types/Todo';\n\ninterface ITodosQuery {\n  inputField?: string;\n  filteredBy?: ETodoStatus;\n}\n\nexport function getPreparedTodos(todos: Todo[], {\n  inputField = '',\n  filteredBy = ETodoStatus.ALL,\n}: ITodosQuery) {\n  let clonedTodos = [...todos];\n\n  if (inputField) {\n    const searchQueryLowerCase = inputField.toLowerCase().trim();\n\n    clonedTodos = clonedTodos.filter(({ title }) => (\n      title.toLowerCase().includes(searchQueryLowerCase)\n    ));\n  }\n\n  if (filteredBy !== ETodoStatus.ALL) {\n    switch (filteredBy) {\n      case ETodoStatus.Active:\n        clonedTodos = clonedTodos.filter(({ completed }) => !completed);\n        break;\n\n      case ETodoStatus.Completed:\n        clonedTodos = clonedTodos.filter(({ completed }) => completed);\n        break;\n\n      default:\n        throw new Error('Invalid select status');\n    }\n  }\n\n  return clonedTodos;\n}\n\nexport const TodoFilter = () => {\n  const {\n    inputField,\n    setInputField,\n    setFilteredBy,\n    filteredBy,\n  } = useContext(TodoContext);\n\n  const handleSelectStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilteredBy(event.currentTarget.value as ETodoStatus);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filteredBy}\n            onChange={handleSelectStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={inputField}\n          onChange={(event) => setInputField(event.target.value)}\n        />\n\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {inputField && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              aria-label=\"delete button\"\n              className=\"delete\"\n              onClick={() => setInputField('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\n\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useContext, useEffect, useState } from 'react';\n\nimport { getUser } from '../../api';\n\nimport { TodoContext } from '../../context/ContextTodo';\n\nimport { User } from '../../types/User';\n\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const {\n    setIsOpenModal,\n    selectedTodo,\n    setSelectedTodo,\n  } = useContext(TodoContext);\n\n  useEffect(() => {\n    getUser(selectedTodo?.userId ?? 0)\n      .then(user => setSelectedUser(user));\n  }, []);\n\n  const handCloseModal = () => {\n    setSelectedTodo(null);\n    setIsOpenModal(false);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!selectedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"delete button\"\n              onClick={handCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n\n              <a href={selectedUser.email}>\n                {selectedUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { FC, useContext } from 'react';\nimport cn from 'classnames';\n\nimport { TodoContext } from '../../context/ContextTodo';\n\nimport { Todo } from '../../types/Todo';\n\ntype TTodoItemProps = {\n  todo: Todo;\n};\n\nexport const TodoItem: FC<TTodoItemProps> = ({ todo }) => {\n  const { id, title, completed } = todo;\n\n  const {\n    setIsOpenModal,\n    setSelectedTodo,\n    selectedTodo,\n  } = useContext(TodoContext);\n\n  const handleSelectTodo = (chosenTodo: Todo) => {\n    setSelectedTodo(chosenTodo);\n    setIsOpenModal(true);\n  };\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={cn({\n        'has-background-info-light': selectedTodo?.id === id,\n      })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <i className=\"fas fa-check\" />\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={cn({\n          'has-text-success': completed,\n          'has-text-danger': !completed,\n        })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => handleSelectTodo(todo)}\n        >\n          <span className=\"icon\">\n            <i className=\"far fa-eye\" />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React, { memo } from 'react';\n\nimport { Todo } from '../../types/Todo';\n\nimport { TodoItem } from '../TodoItem';\n\ntype TTodoList = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<TTodoList> = memo(({ todos }) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => <TodoItem key={todo.id} todo={todo} />)}\n    </tbody>\n  </table>\n));\n","import {\n  FC,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\n\nimport { getTodos } from './api';\n\nimport { TodoContext } from './context/ContextTodo';\n\nimport { TodoFilter, getPreparedTodos } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { TodoList } from './components/TodoList';\nimport { Loader } from './components/Loader';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nexport const App: FC = () => {\n  const {\n    setTodos,\n    isOpenModal,\n    todos,\n    inputField,\n    filteredBy,\n  } = useContext(TodoContext);\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const preparedTodos = useMemo(() => getPreparedTodos(todos, {\n    inputField,\n    filteredBy,\n  }), [inputField, filteredBy, todos]);\n\n  const isShowTodoList = Boolean(preparedTodos.length) && !isLoading;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n\n              {isShowTodoList && (\n                <TodoList todos={preparedTodos} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isOpenModal && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { ContextTodo } from './context/ContextTodo';\n\nReactDOM.render(\n  <ContextTodo>\n    <App />\n  </ContextTodo>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}