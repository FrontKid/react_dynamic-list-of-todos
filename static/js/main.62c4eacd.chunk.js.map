{"version":3,"sources":["api.ts","types/Todo.ts","context/ContextTodo.tsx","utils/custom-string-extensions.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","App.tsx","utils/todoFilter.ts","index.tsx","components/TodoFilter/TodoFilter.module.scss"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","ETodoStatus","initialContext","todos","inputField","filteredBy","All","selectedTodo","setSelectedTodo","setFilteredBy","setInputField","setTodos","TodoContext","createContext","ContextTodo","children","useState","initialValueDeps","initialValue","useMemo","Provider","value","String","prototype","toCapitalize","this","toUpperCase","slice","TodoFilter","useContext","className","onChange","event","currentTarget","Object","values","map","el","type","placeholder","target","styles","deleteButton","onClick","Loader","TodoModal","selectedUser","setSelectedUser","useEffect","userId","user","catch","error","console","warn","id","title","completed","href","email","name","TodoItem","todo","isCurrentTodo","cn","TodoList","memo","App","isLoading","setIsLoading","finally","preparedTodos","searchQueryLowerCase","toLowerCase","trim","filter","includes","Active","Completed","Error","getPreparedTodos","isTodoListVisible","Boolean","length","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.62c4eacd.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export interface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n}\n\nexport enum ETodoStatus {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import {\n  FC,\n  ReactNode,\n  createContext,\n  useMemo,\n  useState,\n} from 'react';\n\nimport { ETodoStatus, Todo } from '../types/Todo';\n\ntype TContextTodoProps = {\n  children: ReactNode;\n};\n\ninterface IContextInitial {\n  todos: Todo[];\n  inputField: string;\n  filteredBy: ETodoStatus;\n  selectedTodo: Todo | null;\n  setSelectedTodo: (newTodo: Todo | null) => void\n  setFilteredBy: (newValue: ETodoStatus) => void;\n  setInputField: (newValues: string) => void;\n  setTodos: (newValues: Todo[]) => void;\n}\n\nconst initialContext: IContextInitial = {\n  todos: [],\n  inputField: '',\n  filteredBy: ETodoStatus.All,\n  selectedTodo: null,\n  setSelectedTodo: () => { },\n  setFilteredBy: () => { },\n  setInputField: () => { },\n  setTodos: () => { },\n};\n\nexport const TodoContext = createContext(initialContext);\n\nexport const ContextTodo: FC<TContextTodoProps> = ({ children }) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [inputField, setInputField] = useState('');\n  const [filteredBy, setFilteredBy] = useState(ETodoStatus.All);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  const initialValueDeps = [\n    todos,\n    inputField,\n    filteredBy,\n    selectedTodo,\n  ];\n\n  const initialValue = useMemo(() => ({\n    todos,\n    inputField,\n    selectedTodo,\n    filteredBy,\n    setSelectedTodo,\n    setTodos,\n    setInputField,\n    setFilteredBy,\n  }), initialValueDeps);\n\n  return (\n    <TodoContext.Provider value={initialValue}>\n      {children}\n    </TodoContext.Provider>\n  );\n};\n","export { };\n\ndeclare global {\n  interface String {\n    toCapitalize(): string;\n  }\n}\n\n// eslint-disable-next-line no-extend-native, func-names\nString.prototype.toCapitalize = function () {\n  return this[0].toUpperCase() + this.slice(1);\n};\n","import React, { useContext } from 'react';\n\nimport { TodoContext } from '../../context/ContextTodo';\n\nimport { ETodoStatus } from '../../types/Todo';\n\nimport '../../utils/custom-string-extensions';\nimport styles from './TodoFilter.module.scss';\n\nexport const TodoFilter = () => {\n  const {\n    inputField,\n    setInputField,\n    setFilteredBy,\n    filteredBy,\n  } = useContext(TodoContext);\n\n  const handleSelectStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilteredBy(event.currentTarget.value as ETodoStatus);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filteredBy}\n            onChange={handleSelectStatus}\n          >\n            {Object.values(ETodoStatus).map(el => (\n              <option key={el} value={el}>{el.toCapitalize()}</option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={inputField}\n          onChange={(event) => setInputField(event.target.value)}\n        />\n\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {inputField && (\n          <span className={`icon is-right ${styles.deleteButton}`}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              aria-label=\"delete button\"\n              className=\"delete\"\n              onClick={() => setInputField('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\n\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useContext, useEffect, useState } from 'react';\n\nimport { getUser } from '../../api';\n\nimport { TodoContext } from '../../context/ContextTodo';\n\nimport { User } from '../../types/User';\n\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const {\n    selectedTodo,\n    setSelectedTodo,\n  } = useContext(TodoContext);\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId)\n        .then(user => setSelectedUser(user))\n        // eslint-disable-next-line no-console\n        .catch(error => console.warn(error));\n    }\n  }, []);\n\n  const handleCloseModal = () => {\n    setSelectedTodo(null);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!selectedUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"delete button\"\n              onClick={handleCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n\n              <a href={selectedUser.email}>\n                {selectedUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { FC, useContext } from 'react';\nimport cn from 'classnames';\n\nimport { TodoContext } from '../../context/ContextTodo';\n\nimport { Todo } from '../../types/Todo';\n\ntype TTodoItemProps = {\n  todo: Todo;\n};\n\nexport const TodoItem: FC<TTodoItemProps> = ({ todo }) => {\n  const { id, title, completed } = todo;\n\n  const {\n    setSelectedTodo,\n    selectedTodo,\n  } = useContext(TodoContext);\n\n  const isCurrentTodo = selectedTodo?.id === id;\n\n  const handleSelectTodo = (chosenTodo: Todo) => {\n    setSelectedTodo(chosenTodo);\n  };\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={cn({\n        'has-background-info-light': isCurrentTodo,\n      })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <i className=\"fas fa-check\" data-cy=\"iconCompleted\" />\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={cn({\n          'has-text-success': completed,\n          'has-text-danger': !completed,\n        })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => handleSelectTodo(todo)}\n        >\n          <span className=\"icon\">\n            <i\n              className={cn('far', {\n                'fa-eye': !isCurrentTodo,\n                'fa-eye-slash': isCurrentTodo,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React, { memo } from 'react';\n\nimport { Todo } from '../../types/Todo';\n\nimport { TodoItem } from '../TodoItem';\n\ntype TTodoList = {\n  todos: Todo[]\n};\n\nexport const TodoList: React.FC<TTodoList> = memo(({ todos }) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => <TodoItem key={todo.id} todo={todo} />)}\n    </tbody>\n  </table>\n));\n","import {\n  FC,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\n\nimport { getTodos } from './api';\n\nimport { TodoContext } from './context/ContextTodo';\n\nimport { getPreparedTodos } from './utils/todoFilter';\n\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { TodoList } from './components/TodoList';\nimport { Loader } from './components/Loader';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nexport const App: FC = () => {\n  const {\n    setTodos,\n    selectedTodo,\n    todos,\n    inputField,\n    filteredBy,\n  } = useContext(TodoContext);\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .catch(error => {\n        // eslint-disable-next-line no-console\n        console.warn(error);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const preparedTodos = useMemo(() => getPreparedTodos(todos, {\n    inputField,\n    filteredBy,\n  }), [inputField, filteredBy, todos]);\n\n  const isTodoListVisible = Boolean(preparedTodos.length) && !isLoading;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n\n              {isTodoListVisible && (\n                <TodoList todos={preparedTodos} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import { ETodoStatus, Todo } from '../types/Todo';\n\ninterface ITodosQuery {\n  inputField?: string;\n  filteredBy?: ETodoStatus;\n}\n\nexport function getPreparedTodos(todos: Todo[], {\n  inputField = '',\n  filteredBy = ETodoStatus.All,\n}: ITodosQuery) {\n  let preparedTodos = [...todos];\n\n  if (inputField) {\n    const searchQueryLowerCase = inputField.toLowerCase().trim();\n\n    preparedTodos = preparedTodos.filter(({ title }) => (\n      title.toLowerCase().includes(searchQueryLowerCase)\n    ));\n  }\n\n  if (filteredBy !== ETodoStatus.All) {\n    switch (filteredBy) {\n      case ETodoStatus.Active:\n        return preparedTodos.filter(({ completed }) => !completed);\n\n      case ETodoStatus.Completed:\n        return preparedTodos.filter(({ completed }) => completed);\n\n      default:\n        throw new Error('Invalid status selected.');\n    }\n  }\n\n  return preparedTodos;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { ContextTodo } from './context/ContextTodo';\n\nReactDOM.render(\n  <ContextTodo>\n    <App />\n  </ContextTodo>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteButton\":\"TodoFilter_deleteButton__1XTQs\"};"],"sourceRoot":""}